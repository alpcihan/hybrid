#version 450
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable

//--------------------------------------------------------------------------------------
// includes
//--------------------------------------------------------------------------------------
#include "core/core.glsl"

//--------------------------------------------------------------------------------------
// work group local size
//--------------------------------------------------------------------------------------
layout(local_size_x = 32) in;
layout(local_size_y = 32) in;

//--------------------------------------------------------------------------------------
// resources
//--------------------------------------------------------------------------------------
layout(set = 3, binding = 0, rgba16f) readonly uniform image2D _source;
layout(set = 3, binding = 1, rgba16f) writeonly uniform image2D _target;

//--------------------------------------------------------------------------------------
// program
//--------------------------------------------------------------------------------------
const mat4 WEIGHTS = mat4(
    vec4(0.50, 0.75, 0.75, 0.50),
    vec4(0.75, 1.00, 1.00, 0.75),
    vec4(0.75, 1.00, 1.00, 0.75),
    vec4(0.50, 0.75, 0.75, 0.50)
);

void main() {
    const ivec2 id = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    const ivec2 coordSrc = id*2;
    const ivec2 srcRes = imageSize(_source);

    vec4 weightedSum = vec4(0.0);
    float totalWeight = 0;

    for (int i=-1; i<3; ++i) {
        for (int j=-1; j<3; ++j) {
            const ivec2 coord = coordSrc + ivec2(i, j);

            if(coord.x < 0 || coord.y < 0 || coord.x >= srcRes.x || coord.y >= srcRes.y) 
                continue;

            const float w = WEIGHTS[i+1][j+1];

            const vec4 val = imageLoad(_source, coord);
            weightedSum += val * w;

            totalWeight += w;
        }
    }

    vec4 averagedSample = weightedSum / totalWeight;

    imageStore(_target, id, averagedSample);
}