#version 450
#extension GL_EXT_nonuniform_qualifier: enable
#extension GL_GOOGLE_include_directive: enable


//--------------------------------------------------------------------------------------
// includes
//--------------------------------------------------------------------------------------
#include "core/core.glsl" //S0
#include "core/ray.glsl"

//--------------------------------------------------------------------------------------
// inputs
//--------------------------------------------------------------------------------------

HYBRID_CORE_GBUFFER_SAMPLER //S1

layout(set = 1, binding = 3 ) writeonly buffer shadowStorage{
    float shadowMap[];
};
//--------------------------------------------------------------------------------------
// kernel
//--------------------------------------------------------------------------------------
layout(local_size_x = 32) in;
layout(local_size_y = 32) in;

//--------------------------------------------------------------------------------------
// Scene data (Coppy pasted from pbr) TODO: Change this
//--------------------------------------------------------------------------------------
struct PointLight {
    vec3 color;
    vec3 position;

    float attenuationCoeff; // TODO: add constant and linear term
};

#define LIGHT_COUNT 3
const PointLight lights[LIGHT_COUNT] = {
    {vec3(1), vec3(-0.5,1,2), 5},
    {vec3(1), vec3(1,0,2),    5},
    {vec3(1), vec3(-1,0.1,2), 5},
};

vec3 positions[3] = vec3[](
    vec3(0.0, -0.5,0.0),
    vec3(0.5, 0.5, 0.0),
    vec3(-0.5, 0.5,0.0)
);

//--------------------------------------------------------------------------------------
// programm
//--------------------------------------------------------------------------------------

//return hit distance if no hit returns -1
float triIntersect(in Ray r,in vec3 v0,in vec3 v1,in vec3 v2 )
{
    vec3 v1v0 = v1 - v0;
    vec3 v2v0 = v2 - v0;
    vec3 rov0 = r.origin - v0;
    vec3  n = cross( v1v0, v2v0 );
    vec3  q = cross( rov0, r.direction );
    float d = 1.0/dot( r.direction, n );
    float u = d*dot( -q, v2v0 );
    float v = d*dot(  q, v1v0 );
    float t = d*dot( -n, rov0 );
    if( u<0.0 || v<0.0 || (u+v)>1.0 ) t = MAX_FLOAT;
    if(t < 0.001) t= MAX_FLOAT;
    return t;
}


//returns 1 if there is a hit between light and rayOrigin
float hitWorld(in Ray r,in float d_light){

    //triangle intersection
    float t =  triIntersect(r, positions[0],positions[1],positions[2]);
    t= min(d_light,t);
    //TODO: sdf intersection
    if(t == d_light) return 0;
    return 1;
}

void main() {
    
    ivec2 texCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 bounds = ivec2( _projectionParams.z, _projectionParams.w);

    if(any(greaterThanEqual(texCoords,bounds))) return;

    vec2 uv = vec2(texCoords)/vec2(bounds);
    const vec3 worldPos = texture(gbuffer1, uv).xyz;
    const vec3 worldNormal = texture(gbuffer2, uv).xyz;
    vec3 epsilon = worldNormal * 0.0001;
    vec3 rayOrigin = worldPos+epsilon;
    
    float shadowCoeff = 1.0;

    float lightContribution = 1.0 / LIGHT_COUNT;
    for(uint i = 0; i < LIGHT_COUNT; ++i){
        
        vec3 rayDirection = normalize(lights[i].position - worldPos);
        float rdl = dot(rayDirection,worldNormal);
        
        if(rdl <= 0) continue; // light is behind

        float t_light = distance(lights[i].position , rayOrigin);

        Ray ray = createRay(rayOrigin, rayDirection);
        shadowCoeff -= hitWorld(ray, t_light) * lightContribution;
    }    
    
    uint idx = texCoords.y * bounds.x + texCoords.x;
    shadowMap[idx] = shadowCoeff;
}